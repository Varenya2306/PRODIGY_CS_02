<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pixel Manipulation Image Encryption Tool</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #083344; /* Changed from bg-violet-800 to dark cyan (cyan-950) */
            color: #cffafe; /* Kept text-cyan-100 */
        }
        .container {
            max-width: 900px;
            margin: 2rem auto;
            padding: 1.5rem;
            background-color: #0e7490; /* Changed from bg-violet-700 to cyan-700 */
            border-radius: 0.5rem;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        .canvas-container {
            border: 2px dashed #06b6d4; /* Changed from border-violet-500 to cyan-500 */
            border-radius: 0.375rem;
            background-color: #164e63; /* Changed from bg-violet-600 to cyan-800 for depth */
            min-height: 200px;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden; /* Ensure canvas doesn't overflow container */
        }
        canvas {
            max-width: 100%;
            max-height: 400px; /* Limit canvas height for display */
            object-fit: contain;
            border-radius: 0.25rem;
        }
        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 0.375rem;
            font-weight: 600;
            transition: background-color 0.2s;
            cursor: pointer;
        }
        .btn-primary {
            background-color: white; /* Changed from bg-pink-500 to white */
            color: #155e75; /* Kept text-cyan-800 for contrast on white */
        }
        .btn-primary:hover {
            background-color: #f1f5f9; /* Changed from bg-pink-600 to slate-100 */
        }
        .btn-secondary {
            background-color: #06b6d4; /* Changed from bg-violet-500 to cyan-500 */
            color: #155e75; /* Kept text-cyan-800 */
        }
        .btn-secondary:hover {
            background-color: #0891b2; /* Changed from bg-violet-600 to cyan-600 */
        }
        .input-field {
            background-color: #164e63; /* Changed from bg-violet-600 to cyan-800 */
            border: 1px solid #22d3ee; /* Changed from border-violet-400 to cyan-400 */
            color: #cffafe; /* Kept text-cyan-100 */
            padding: 0.5rem;
            border-radius: 0.375rem;
            width: 100%;
        }
        /* Custom styles for file input button to match new theme */
        .input-field[type="file"]::-webkit-file-upload-button {
            margin-right: 1rem;
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            border: 0;
            font-size: 0.875rem;
            font-weight: 600;
            background-color: white; /* Changed from bg-pink-100 to white */
            color: #1e293b; /* Changed from text-pink-700 to slate-800 for contrast */
            cursor:pointer;
        }
        .input-field[type="file"]::-webkit-file-upload-button:hover {
            background-color: #e2e8f0; /* Changed from bg-pink-200 to slate-200 */
        }
        /* For Firefox */
        .input-field[type="file"] {
            /* color: #1e293b; /* To style the "No file chosen" text if needed, but Tailwind handles this */
        }


        .alert-warning {
            background-color: #fef3c7; /* bg-yellow-100 - keeping yellow for warnings as it's standard */
            border: 1px solid #fde68a; /* border-yellow-300 */
            color: #78350f; /* text-yellow-800 */
            padding: 0.75rem;
            border-radius: 0.375rem;
            margin-top: 1rem;
        }
        .message-box {
            margin-top: 1rem;
            padding: 0.75rem;
            border-radius: 0.375rem;
            text-align: center;
        }
        .message-success {
            background-color: #d1fae5; /* bg-green-100 */
            color: #065f46; /* text-green-800 */
        }
        .message-error {
            background-color: #fee2e2; /* bg-red-100 */
            color: #991b1b; /* text-red-800 */
        }
        .header-title {
            color: #cffafe; /* Kept text-cyan-100 */
        }
        .header-subtitle {
            color: #67e8f9; /* Changed from text-violet-300 to cyan-300 */
        }
        .section-title {
            color: #a5f3fc; /* Changed from text-violet-100 to cyan-200 */
        }
        .label-text {
            color: #99f6e4; /* Changed from text-violet-200 to teal-200 */
        }

    </style>
</head>
<body>
    <div class="container">
        <header class="text-center mb-8">
            <h1 class="text-3xl font-bold header-title">Pixel Manipulation Image Encryption Tool</h1>
            <p class="text-sm header-subtitle mt-2">Demonstrates simple pixel XOR for "encryption". Not for secure use.</p>
        </header>

        <div class="alert-warning mb-6">
            <strong class="font-bold">Disclaimer:</strong> This tool is for educational purposes only. The "encryption" method used (XOR with a simple key) is NOT cryptographically secure and should NOT be used to protect sensitive data.
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div>
                <label for="imageUpload" class="block text-sm font-medium label-text mb-1">Upload Image:</label>
                <input type="file" id="imageUpload" accept="image/*" class="input-field file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-white file:text-gray-800 hover:file:bg-slate-100">
            </div>
            <div>
                <label for="encryptionKey" class="block text-sm font-medium label-text mb-1">Numeric Key (0-255):</label>
                <input type="number" id="encryptionKey" min="0" max="255" value="123" class="input-field">
            </div>
        </div>

        <div class="flex flex-col sm:flex-row justify-center items-center space-y-4 sm:space-y-0 sm:space-x-4 mb-8">
            <button id="encryptBtn" class="btn btn-primary w-full sm:w-auto">Encrypt Image</button>
            <button id="decryptBtn" class="btn btn-primary w-full sm:w-auto">Decrypt Image</button>
            <button id="downloadBtn" class="btn btn-secondary w-full sm:w-auto" disabled>Download Processed Image</button>
        </div>

        <div id="messageArea" class="message-box" style="display: none;"></div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
                <h2 class="text-xl font-semibold mb-2 text-center section-title">Original Image</h2>
                <div class="canvas-container">
                    <canvas id="originalCanvas"></canvas>
                </div>
            </div>
            <div>
                <h2 class="text-xl font-semibold mb-2 text-center section-title">Processed Image</h2>
                <div class="canvas-container">
                    <canvas id="processedCanvas"></canvas>
                </div>
            </div>
        </div>
    </div>

    <script>
        // DOM Elements
        const imageUpload = document.getElementById('imageUpload');
        const encryptionKeyInput = document.getElementById('encryptionKey');
        const encryptBtn = document.getElementById('encryptBtn');
        const decryptBtn = document.getElementById('decryptBtn');
        const downloadBtn = document.getElementById('downloadBtn');
        const originalCanvas = document.getElementById('originalCanvas');
        const processedCanvas = document.getElementById('processedCanvas');
        const originalCtx = originalCanvas.getContext('2d');
        const processedCtx = processedCanvas.getContext('2d');
        const messageArea = document.getElementById('messageArea');

        let originalImageData = null; // To store the original image data for decryption
        let currentImageFileName = 'processed_image.png'; // Default filename for download

        // --- Utility Functions ---
        function showMessage(message, type = 'success') {
            messageArea.textContent = message;
            messageArea.className = `message-box message-${type}`; // Reset classes and add new ones
            messageArea.style.display = 'block';
            setTimeout(() => {
                if (messageArea.textContent === message) { // Only hide if it's still the same message
                    messageArea.style.display = 'none';
                }
            }, 5000);
        }

        function validateKey() {
            const key = parseInt(encryptionKeyInput.value);
            if (isNaN(key) || key < 0 || key > 255) {
                showMessage('Invalid key. Please enter a number between 0 and 255.', 'error');
                return null;
            }
            return key;
        }

        // --- Image Loading ---
        imageUpload.addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (file) {
                currentImageFileName = file.name.replace(/\.[^/.]+$/, "") + "_processed.png"; // Set filename for download
                const reader = new FileReader();
                reader.onload = (e) => {
                    const img = new Image();
                    img.onload = () => {
                        // Resize canvas to fit image while maintaining aspect ratio and respecting max dimensions
                        const maxCanvasWidth = originalCanvas.parentElement.clientWidth > 0 ? originalCanvas.parentElement.clientWidth : 300; // Fallback width
                        const maxCanvasHeight = 400; // As defined in CSS

                        let newWidth = img.width;
                        let newHeight = img.height;

                        if (newWidth === 0 || newHeight === 0) {
                            showMessage('Image has zero dimensions. Cannot process.', 'error');
                            originalImageData = null;
                            return;
                        }

                        if (newWidth > maxCanvasWidth) {
                            newHeight = (maxCanvasWidth / newWidth) * newHeight;
                            newWidth = maxCanvasWidth;
                        }
                        if (newHeight > maxCanvasHeight) {
                            newWidth = (maxCanvasHeight / newHeight) * newWidth;
                            newHeight = maxCanvasHeight;
                        }
                        
                        originalCanvas.width = newWidth;
                        originalCanvas.height = newHeight;
                        originalCtx.drawImage(img, 0, 0, newWidth, newHeight);
                        try {
                            originalImageData = originalCtx.getImageData(0, 0, newWidth, newHeight);
                        } catch (error) {
                            showMessage('Could not get image data. The image might be tainted (e.g. from a different origin without CORS headers) or invalid.', 'error');
                            originalImageData = null;
                            originalCtx.clearRect(0,0,newWidth,newHeight); // Clear canvas if error
                            return;
                        }


                        // Clear processed canvas
                        processedCanvas.width = newWidth;
                        processedCanvas.height = newHeight;
                        processedCtx.clearRect(0, 0, newWidth, newHeight);
                        downloadBtn.disabled = true;
                        showMessage('Image loaded successfully. Ready to encrypt.', 'success');
                    }
                    img.onerror = () => {
                        showMessage('Error loading image file. Please ensure it is a valid image format.', 'error');
                        originalImageData = null;
                    }
                    img.src = e.target.result;
                }
                reader.onerror = () => {
                    showMessage('Error reading file.', 'error');
                    originalImageData = null;
                }
                reader.readAsDataURL(file);
            } else {
                originalImageData = null;
                // Clear canvases if no file is selected or file is removed
                originalCtx.clearRect(0, 0, originalCanvas.width, originalCanvas.height);
                processedCtx.clearRect(0, 0, processedCanvas.width, processedCanvas.height);
                originalCanvas.width = 0; originalCanvas.height = 0; // Collapse canvas
                processedCanvas.width = 0; processedCanvas.height = 0;
                downloadBtn.disabled = true;
            }
        });

        // --- Pixel Manipulation (XOR) ---
        function processPixels(sourceImageData, key, canvasContext, targetCanvas) {
            if (!sourceImageData) {
                showMessage('Please load an image first.', 'error');
                return null;
            }
            if (key === null) return null; // Key validation already showed message

            // Create a new ImageData object to avoid modifying the originalImageData directly
            // This is crucial for allowing multiple operations on the same original image
            const newClonedArray = new Uint8ClampedArray(sourceImageData.data);
            const imageData = new ImageData(
                newClonedArray,
                sourceImageData.width,
                sourceImageData.height
            );
            const data = imageData.data;

            // XOR each RGB value with the key. Alpha channel (a) is left unchanged.
            for (let i = 0; i < data.length; i += 4) {
                data[i]     = data[i] ^ key;    // Red
                data[i + 1] = data[i + 1] ^ key; // Green
                data[i + 2] = data[i + 2] ^ key; // Blue
                // data[i + 3] is the alpha channel, untouched
            }
            
            targetCanvas.width = imageData.width;
            targetCanvas.height = imageData.height;
            canvasContext.putImageData(imageData, 0, 0);
            downloadBtn.disabled = false;
            return imageData; // Return processed data if needed elsewhere
        }

        // --- Event Listeners for Buttons ---
        encryptBtn.addEventListener('click', () => {
            const key = validateKey();
            if (!originalImageData) {
                showMessage('Please upload an image before encrypting.', 'error');
                return;
            }
            const processedData = processPixels(originalImageData, key, processedCtx, processedCanvas);
            if (processedData) {
                showMessage('Image "encrypted" successfully with XOR.', 'success');
            }
        });

        decryptBtn.addEventListener('click', () => {
            const key = validateKey();
            if (!originalImageData) {
                showMessage('Please upload an image first to have an original to decrypt to.', 'error');
                return;
            }
            // Decryption is the same XOR operation. It's applied to the originalImageData
            // to show what the decrypted version of that original (if it were encrypted with this key) would be.
            // Or, if the user wants to decrypt the content of processedCanvas, they should upload that processed image.
            const processedData = processPixels(originalImageData, key, processedCtx, processedCanvas);
            if (processedData) {
                showMessage('Image "decrypted" successfully with XOR.', 'success');
            }
        });
        
        // --- Download Functionality ---
        downloadBtn.addEventListener('click', () => {
            if (processedCanvas.width === 0 || processedCanvas.height === 0) {
                showMessage('No processed image to download.', 'error');
                return;
            }
            // Check if canvas has actual content (not blank)
            let isEmpty = true;
            try {
                const processedPixelData = processedCtx.getImageData(0, 0, processedCanvas.width, processedCanvas.height).data;
                for (let i = 3; i < processedPixelData.length; i += 4) { // Check alpha channel
                    if (processedPixelData[i] > 0) { // Check if any pixel is not fully transparent
                        isEmpty = false;
                        break;
                    }
                }
            } catch (e) {
                showMessage('Cannot get processed image data. It might be blank or an error occurred.', 'error');
                return;
            }

            if (isEmpty) {
                showMessage('Processed image is blank. Cannot download.', 'error');
                return;
            }

            const dataURL = processedCanvas.toDataURL('image/png');
            const link = document.createElement('a');
            link.href = dataURL;
            link.download = currentImageFileName || 'processed_image.png'; // Use original filename with suffix
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            showMessage('Processed image download started.', 'success');
        });

        // Responsive canvas resizing
        function redrawCanvases() {
            if (originalImageData) {
                const img = new Image();
                img.onload = () => {
                    const maxCanvasWidth = originalCanvas.parentElement.clientWidth > 0 ? originalCanvas.parentElement.clientWidth : 300;
                    const maxCanvasHeight = 400;
                    let newWidth = img.width;
                    let newHeight = img.height;

                    if (newWidth === 0 || newHeight === 0) return; // Should have been caught earlier

                    if (newWidth > maxCanvasWidth) {
                        newHeight = (maxCanvasWidth / newWidth) * newHeight;
                        newWidth = maxCanvasWidth;
                    }
                    if (newHeight > maxCanvasHeight) {
                        newWidth = (maxCanvasHeight / newHeight) * newWidth;
                        newHeight = maxCanvasHeight;
                    }
                    
                    originalCanvas.width = newWidth;
                    originalCanvas.height = newHeight;
                    originalCtx.drawImage(img, 0, 0, newWidth, newHeight);
                    // Re-fetch originalImageData after redraw if necessary, though it should be the same content, just scaled.
                    // For this app, originalImageData is based on the first load, not subsequent resizes.

                    // Handle processed canvas: If it had content, it will be cleared by resize.
                    // User needs to re-process.
                    if (processedCanvas.width > 0 && processedCanvas.height > 0) {
                        const oldProcessedWidth = processedCanvas.width;
                        processedCanvas.width = newWidth;
                        processedCanvas.height = newHeight;
                        processedCtx.clearRect(0,0,newWidth, newHeight); // Clear it
                        if (!downloadBtn.disabled) { // if there was something to download
                            showMessage("Window resized. Please re-process the image if needed.", "info"); // Use a distinct type for info
                            downloadBtn.disabled = true; // Disable download as content is cleared
                        }
                    }
                }
                // Create a temporary image from originalImageData to get its natural dimensions for resizing
                const tempOriginalImageForResize = new Image();
                tempOriginalImageForResize.onload = () => { img.src = tempOriginalImageForResize.src; };
                
                // Create data URL from originalImageData to load into the temp image
                const tempCanvasForDataUrl = document.createElement('canvas');
                tempCanvasForDataUrl.width = originalImageData.width;
                tempCanvasForDataUrl.height = originalImageData.height;
                tempCanvasForDataUrl.getContext('2d').putImageData(originalImageData, 0, 0);
                try {
                    tempOriginalImageForResize.src = tempCanvasForDataUrl.toDataURL();
                } catch (e) {
                    // If originalImageData was tainted, this might fail.
                    // In this case, the original canvas might not redraw correctly on resize.
                    // console.error("Error creating data URL for resize:", e);
                }
            }
        }
        window.addEventListener('resize', redrawCanvases);

    </script>
</body>
</html>
